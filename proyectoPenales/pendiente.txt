useState:

    players → nombres y estrategias
    currentTurn → turno actual (quién patea)
    score → array con los resultados (X o ⚽)
    gamePhase → "inicio", "estrategia", "jugando", "finalizado"
    resultMessage → mostrar “Gol” o “Atajado”
    showNextButton → si está esperando al botón para avanzar

Components:

    OK - StartScreen.jsx   # Pantalla de inicio 
    OK - PenaltySetup.jsx  # Selección de pateo y atajada
    GameBoard.jsx          # Arco y turno actual
    ScoreBoard.jsx         # Marcador
    ResultMessage.jsx      # Mensaje del resultado (Gol o Atajado)
    EndGame.jsx            # Fin del juego

Archivos sugeridos nuevos
    EndScreen.jsx: Pantalla final visual.
    gameLogic.js: (opcional) funciones auxiliares para manejo de lógica del juego.
    styles/penalty.css: (si deciden mover estilos ahí).


Estructura general del juego
    1. Pantalla de inicio
        Inputs para ingresar nombre del Jugador 1 y Jugador 2.
        Botón de "Comenzar juego".

    2. Selección de estrategia
        Cada jugador selecciona:
        Dónde quiere patear.
        Dónde quiere atajar.
        Opciones (ambos eligen antes de comenzar):
        Izquierda
        Centro
        Derecha

3. Partida (turnos de penales)

    Turno del Jugador 1:
    Se muestra una animación o gráfico simple del arco.
    Se simula dónde patea y dónde el otro atajó.
    Mostrar resultado (Gol o Atajado) + marcar en el marcador (❌ o ⚽).
    Botón: “Siguiente penal”.
    Turno del Jugador 2: lo mismo pero al revés.

    Se deben mostrar los dos marcadores tanto del jugador A como el B nombre y debajo el marcador, esto debe estar siempre visible 
    los marcadores mostrar en rojo si el penla se erro, en verse si se metio el gol y en gris si todavia no se pateo
    No se muestra la animacion de las manos y la pelota en el arco segun donde patearon y atajaron cada jugador


4. Marcador

    Turno	Jugador 1	Jugador 2
    1	        ❌	       ⚽
    2	        ⚽	       ❌

5. Fin del juego

    Se determina quién ganó.
    Mostrar mensaje final tipo: “¡Ganó Jugador X!”.
    Botón: “Volver a jugar”.


👤 Persona 1: Lógica & Estados del Juego
    1. Manejo de Fin de Juego y Pantalla Final
        📌 Crear pantalla final cuando se completan todos los turnos (ej: 10 rondas).
        📌 Mostrar: Ganador, puntaje final y opción de reiniciar.
        📌 Guardar en estado quién ganó y mostrar mensaje.

    2. Agregar modo súper Gol o Atajada especial (opcional)
        📌 Definir condiciones para un gol "especial" si se dan ciertas coincidencias entre jugador y estrategia (puede ser divertido).

    3. Modularizar funciones si es necesario
        📌 Extraer funciones de lógica (por ejemplo: getNextTurn, calculateScore) a un archivo utils/gameLogic.js para limpiar GameTurns.jsx.

    4. Tests simples (si quieren escalar)
        📌 Preparar casos simples en consola para verificar reglas de juego.

👤 Persona 2: Estética, Animaciones & UX
    1. Mejorar diseño visual de VisualArco
        📌 Agregar animación al disparo (pelota que aparece y se mueve).
        📌 Colorear aciertos/fallos (verde/rojo) por un par de segundos.

    2. Mejorar diseño de ProgressBar y marcador
        

    3. Diseñar EndScreen.jsx (pantalla final visual)
        📌 Mostrar animación o mensaje llamativo (🏆 o 😭).
        📌 Botón para volver al inicio o jugar de nuevo.

    4. Responsividad móvil básica
        📌 Revisar que en pantallas pequeñas el arco, inputs y botones no se rompan.

